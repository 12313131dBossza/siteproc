# === Core Runtime ===
NEXT_PUBLIC_SUPABASE_URL=https://vrkgtygzcokqoeeutvxd.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZya2d0eWd6Y29rcW9lZXV0dnhkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU4Njc2NjIsImV4cCI6MjA3MTQ0MzY2Mn0.rBYMsJmz0hGNDpfSa2zd6U8KeBpNSgzCwF8H_2P9LYQ
NEXT_PUBLIC_APP_URL=http://localhost:3000
SUPABASE_SERVICE_ROLE=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZya2d0eWd6Y29rcW9lZXV0dnhkIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTg2NzY2MiwiZXhwIjoyMDcxNDQzNjYyfQ._0Ln-gipoPTEvOWT7N4ISmxaNOyk5YsFrusH1fPSnMI
APP_BASE_URL=http://localhost:3000

# === Security / Public API Controls ===
PUBLIC_HMAC_SECRET=
PUBLIC_HMAC_REQUIRE=false
PUBLIC_HMAC_ENFORCE_TS=false
PUBLIC_HMAC_MAX_DRIFT_MS=300000
PUBLIC_CORS_ORIGINS=http://localhost:3000
RATE_LIMIT_WINDOW_MS=60000
RATE_LIMIT_MAX=20
PUBLIC_TOKEN_MAX_ATTEMPTS=5
PUBLIC_TOKEN_LOCK_MS=900000
PUBLIC_CO_ONE_TIME=false

# === Upload Controls ===
UPLOAD_IMAGE_MAX_BYTES=2000000
UPLOAD_IMAGE_ALLOWED_TYPES=image/png,image/jpeg,image/webp

# === CSP (set CSP_ENFORCE true to send header in middleware first response) ===
CSP_ENFORCE=false
CSP_SCRIPT_SRC='self'

# === Dev Utilities ===
DEV_TOOLS_ENABLED=false
DEV_AUTOLOGIN_EMAIL=yaibondiseiei@gmail.com

# === Email ===
EMAIL_FROM=no-reply@example.com
SMTP_HOST=
SMTP_PORT=
SMTP_USER=
SMTP_PASS=

# === Analytics / Monitoring (add provider envs) ===
SENDGRID_API_KEY=
POSTHOG_KEY=
SENTRY_DSN=

'use client';
import { useCallback, useEffect, useState } from 'react';
import { sbBrowser } from '@/lib/supabase-browser';

function useHasMounted() {
  const [mounted, setMounted] = useState(false);
  useEffect(() => setMounted(true), []);
  return mounted;
}

type PageProps = { 
  params?: Record<string,string>; 
  searchParams?: Record<string,string|string[]|undefined>; 
};

export default function LoginPage(_props: PageProps) {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [sent, setSent] = useState(false);
  const hasMounted = useHasMounted();
  const supabase = sbBrowser();
  
  // Get APP_URL safely - use a consistent value between server and client
  const appUrl = typeof window !== 'undefined' 
    ? window.location.origin 
    : (process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000');

  // Log APP_URL once on mount for debugging
  useEffect(() => {
    console.log('[login] APP_URL =', appUrl);
  }, [appUrl]);

  const handleSubmit = useCallback(async (e: React.FormEvent) => {
    e.preventDefault();
    const em = email.trim();
    if (!em) {
      console.error('Enter an email');
      return;
    }
    setLoading(true);
    try {
      const { error } = await supabase.auth.signInWithOtp({
        email: em,
        options: { 
          emailRedirectTo: `${appUrl}/auth/callback` 
        }
      });
      if (error) {
        console.error('[login] magic link error', error.message);
      } else {
        setSent(true);
        console.log('[login] Magic link sent');
      }
    } catch (err: any) {
      console.error('[login] Unexpected', err?.message);
    } finally {
      setLoading(false);
    }
  }, [email, supabase, appUrl]);

  const handleDevAutoLogin = () => {
    console.log('[login] Dev auto-login triggered');
    window.location.assign('/api/dev/autologin');
  };

  return (
    <div className="p-8 max-w-md mx-auto space-y-6">
      <h1 className="text-2xl font-semibold">Login</h1>
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <label className="block space-y-1">
          <span className="text-sm font-medium">Email</span>
          <input
            type="email"
            value={email}
            onChange={e => setEmail(e.target.value)}
            required
            className="sp-input w-full"
            placeholder="you@example.com"
            disabled={sent}
          />
        </label>
        <button 
          type="submit"
          disabled={loading || sent} 
          className="sp-btn-primary w-full disabled:opacity-50"
        >
          {loading ? 'Sending...' : sent ? 'Sent âœ…' : 'Send Magic Link'}
        </button>
      </form>

      <p className="text-xs text-neutral-500">
        {sent 
          ? 'Check your email for the link.' 
          : "We'll email you a magic sign-in link. No password required."
        }
      </p>

      {/* Stable wrapper that exists on both server and client */}
      <div className="mt-3 min-h-[20px]" suppressHydrationWarning>
        {process.env.NODE_ENV !== 'production' && hasMounted && (
          <button
            type="button"
            className="text-blue-600 underline text-sm"
            onClick={handleDevAutoLogin}
          >
            ðŸ›  Dev: Auto-login
          </button>
        )}
      </div>
    </div>
  );
}

